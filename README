
# LICENSETEXT
# 
#   Copyright (C) 2012 : GreenSocs Ltd
#       http://www.greensocs.com/ , email: info@greensocs.com
# 
# The contents of this file are subject to the licensing terms specified
# in the file LICENSE. Please consult this file for restrictions and
# limitations that may apply.
# 
# ENDLICENSETEXT


README  for GSProject based project distributions
=======================================

There are 2 ways of building a GSPoject distribution. The recommended
way is using a Virtual Machine. An alternative is to build on your
host machine, but then there is no guarantee that the librarys etc
will be compatible.

GSProject uses Vagrant to help distribute projects. Vagrant is a
wrapper arroung VirtualBox, which provides virtual machines.

vagrant is documented on the web site: http://www.vagrantup.com/

GSProjects VM's  ensure that the user environment is always consistent.

You may distribute a GSProject VM to 3rd parties to ensure consistent
environemnts between yourself and your suppliers.

In the case where you align the GSProject environment with your actual
hardware, you may distribute the VM to ensure consistent
environments, but only ship the results of binaries built on the VM
and use them on your actual hardware.

GSProjects use 'cookbooks' to compile and build the componets of a
Project. These are interpreted, within the VM, by a tool called
chef. Chef is documented on the web page: http://www.opscode.com/chef/

USER COMMANDS
================

Please install vagrant and it's dependencies - follow the directions
on http://www.vagrantup.com/.

unpack the tar file for this project:
%> tar -zxf <GSProject name File.tar.gz>

cd into the resulting directory:

%> cd <GSProject name>

then simply run
%> vagrant up

This will build the entire virtual machine, and the files assosciated
with this GSProject.

ADVANCED COMMANDS
======================

vagrant up		this command will initialize a VM and build
		all the elements of a project

vagrant provision	this will re-initialize the build phase
		normally run by vagrant up

NOTE: a running VM will 'shut down' automatically after it has been
idle for some time. This is for your convenience and to prevent
exsessive memory and CPU usage of idle VMs.

vagrant run <command>
		this very poswerful command will run <command> from
		within the VM. This command can be run from within the directory
		structure of the Project and the command will be run in that same
		directory within the VM.

vagrant ssh	 Log into the VM (In general this is not required, as
		 vagrant run can be used)


vagrant halt	 Stop a VM

vagrant destroy	 Destroy and remove a VM

vagrant upgrade [<tar ball>]
		This command will halt, and destroy and existing VM,
		 and then either update the project from a git
		 repository or from the tar-ball if one is given on the command
		 line. The resulting Project will then be re-initialized (equivelent of
		 vagrant up).

NEVER DELETE A GSPROJECT WITHOUT FIRST RUNNING : vagrant destroy


DIRECTORY ORGANIZATION
=========================

NOTE: Both Vagrant and VirtualBox stores some of their files within
the users home directory. This is documented on their web sites. Care
should be taken to use vagrant destory if a VM is to be removed.

A GSProject has the following structure:

<GSProject Home>    <--- this directory is available within the VM as /vagrant/
	   GSProject/	<--- files common to all GSProjects
	    Platform	<--- Top level model code
	    ModelLibrary	<--- Model component library (Built during VM initialization)
	    Vagrantfile	This file specifies what elements
			('cookbooks') are required for this project. It also specifies the
			basic machine (e.g. 32 or 64 bit), and the memory size.
	    cookbooks	<--- cookbooks needed for this Project
	    toplevel		<--- cookbook to build the top level of this project
	    versions		<--- special cookbook to specify versions for all cookbooks


BUILDING ON YOUR HOST
=======================

Before you start, you will need to ensure that chef and chef-solo are
installed (see http://www.opscode.com/ for more infomation).

You will then be able to run, from within your <GSProject Home> directory:

%> chef-solo -c ./Vagrantfile 





MAKING A NEW GSPROJECT
=========================

Make a directory for your new project, add it to a git repository

%> git submodule add git://git.greensocs.com/GSProject GSProject
make a directory for the cookbooks,
Add a cookbook for the toplevel (called toplevel)
Add a cookbook for versions (called versions)
git submodule add git://git.greensocs.com/chef_<cookbook> cookbooks/chef_<cookbook>
    for each cookbook being used

At the top level, include a file called Vagrantfile
Here is an example:
--------------------------- Vagrantfile ---------------
# -*- mode: ruby -*-
# vi: set ft=ruby :

pwd=File.dirname(File.expand_path(__FILE__))
require "#{pwd}/GSProject/GSVagrantFile.rb"

cookbooks=[
  "chef-amba-kit",
  "chef-systemc",
  "chef-greenlib",
  "chef-gem5",
  "chef-ACESlave"
];

versions = "versions";
toplevel = "toplevel";

memory = "2048";

box = "GreenSocsBaseMachine32Bit15Jan13"
#box = "GreenSocsBaseMachine64Bit28Jan13"


GSProject.new(box,cookbooks, versions, toplevel, memory).run 
---------------------------